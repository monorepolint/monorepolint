"use strict";(self.webpackChunk_monorepolint_docs=self.webpackChunk_monorepolint_docs||[]).push([[515],{6216:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"guides/config-in-a-package","title":"Putting your Config in a Package","description":"Reasons you may want to put your config in a package:","source":"@site/docs/guides/config-in-a-package.md","sourceDirName":"guides","slug":"/guides/config-in-a-package","permalink":"/docs/guides/config-in-a-package","draft":false,"unlisted":false,"editUrl":"https://github.com/monorepolint/monorepolint/edit/main/packages/docs/docs/guides/config-in-a-package.md","tags":[],"version":"current","frontMatter":{"title":"Putting your Config in a Package"},"sidebar":"docs","previous":{"title":"Archetypes and Large Monorepos","permalink":"/docs/guides/archetypes"},"next":{"title":"Tips and Tricks","permalink":"/docs/tips-and-tricks"}}');var t=o(4489),r=o(6683);const s={title:"Putting your Config in a Package"},a=void 0,c={},l=[];function p(n){const e={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"Reasons you may want to put your config in a package:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"You want to keep using typescript"}),"\n",(0,t.jsx)(e.li,{children:"You want to reuse your configuration for other people"}),"\n",(0,t.jsx)(e.li,{children:"You like as pure as possible of a root package.json"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Whatever your reason,"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["Create your new package. The monorepolint project calls theirs\n",(0,t.jsx)(e.code,{children:"@monorepolint/internal-mrl-config"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Migrate your configuration to this package."}),"\n",(0,t.jsx)(e.p,{children:"This will greatly depend on how your own build system is setup. For MRL internally,\nit involves an index.ts file that roughly looks like:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import type { Config } from "@monorepolint/config";\nimport * as Rules from "@monorepolint/rules";\n\nexport const config: Config = {\n  rules: [\n    /* ... */\n  ],\n};\n'})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Update your root config"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",metastring:'title=".monorepolint.config.mjs"',children:'// Don\'t forget to use your package!\nimport config from "@monorepolint/internal-mrl-config";\n\nexport default config;\n'})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Be sure to depend on your package in your workspace root"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",metastring:'title="package.json"',children:'{\n    ...\n    "devDependencies": {\n        "@monorepolint/cli": "^0.5.0",\n        "@monorepolint/internal-mrl-config": "^0.5.0",\n    }\n}\n'})}),"\n"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},6683:(n,e,o)=>{o.d(e,{R:()=>s,x:()=>a});var i=o(4349);const t={},r=i.createContext(t);function s(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);
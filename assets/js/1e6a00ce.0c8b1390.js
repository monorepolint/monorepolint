"use strict";(self.webpackChunk_monorepolint_docs=self.webpackChunk_monorepolint_docs||[]).push([[862],{4533:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>c});var i=a(6364);const l={},s=i.createContext(l);function t(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(s.Provider,{value:n},e.children)}},6807:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"rules/alphabetical-dependencies","title":"alphabeticalDependencies","description":"Ensures that all dependency blocks within a project are ordered alphabetically.","source":"@site/docs/rules/alphabetical-dependencies.md","sourceDirName":"rules","slug":"/rules/alphabetical-dependencies","permalink":"/docs/rules/alphabetical-dependencies","draft":false,"unlisted":false,"editUrl":"https://github.com/monorepolint/monorepolint/edit/main/packages/docs/docs/rules/alphabetical-dependencies.md","tags":[],"version":"current","frontMatter":{"title":"alphabeticalDependencies"},"sidebar":"docs","previous":{"title":"Tips and Tricks","permalink":"/docs/tips-and-tricks"},"next":{"title":"alphabeticalScripts","permalink":"/docs/rules/alphabetical-scripts"}}');var l=a(1360),s=a(4533);const t={title:"alphabeticalDependencies"},c="alphabeticalDependencies",o={},r=[{value:"What it does",id:"what-it-does",level:2},{value:"When to use it",id:"when-to-use-it",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Configuration options",id:"configuration-options",level:2},{value:"Real-world examples",id:"real-world-examples",level:2},{value:"Example 1: Basic monorepo setup",id:"example-1-basic-monorepo-setup",level:3},{value:"Example 2: Excluding specific packages",id:"example-2-excluding-specific-packages",level:3},{value:"Example 3: Including root workspace",id:"example-3-including-root-workspace",level:3},{value:"Before/After",id:"beforeafter",level:2},{value:"Before (unorganized dependencies)",id:"before-unorganized-dependencies",level:3},{value:"After (alphabetically sorted)",id:"after-alphabetically-sorted",level:3},{value:"Source code",id:"source-code",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"alphabeticaldependencies",children:"alphabeticalDependencies"})}),"\n",(0,l.jsx)(n.p,{children:"Ensures that all dependency blocks within a project are ordered alphabetically."}),"\n",(0,l.jsx)(n.h2,{id:"what-it-does",children:"What it does"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"alphabeticalDependencies"})," rule automatically sorts dependencies, devDependencies, peerDependencies, and optionalDependencies in alphabetical order. This creates a consistent, predictable structure that makes it easier to:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Find dependencies quickly"})," when reviewing package.json files"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Avoid duplicate dependencies"})," during manual edits"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Merge changes cleanly"})," by reducing git conflicts"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Maintain consistency"})," across all packages in your monorepo"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"when-to-use-it",children:"When to use it"}),"\n",(0,l.jsxs)(n.p,{children:["This rule is recommended for ",(0,l.jsx)(n.strong,{children:"all monorepo projects"})," as a foundational consistency rule. It's particularly valuable when:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Multiple developers are adding dependencies to the same packages"}),"\n",(0,l.jsx)(n.li,{children:"You want to prevent merge conflicts in package.json files"}),"\n",(0,l.jsx)(n.li,{children:"Code reviews should focus on logic, not dependency organization"}),"\n",(0,l.jsx)(n.li,{children:"You're migrating from manual dependency management to automated consistency"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'import { alphabeticalDependencies } from "@monorepolint/rules";\n\nexport default {\n  rules: [\n    alphabeticalDependencies({}),\n  ],\n};\n'})}),"\n",(0,l.jsx)(n.h2,{id:"configuration-options",children:"Configuration options"}),"\n",(0,l.jsx)(n.p,{children:"Currently, this rule has no configuration options and will always sort dependencies alphabetically using case-insensitive comparison."}),"\n",(0,l.jsx)(n.h2,{id:"real-world-examples",children:"Real-world examples"}),"\n",(0,l.jsx)(n.h3,{id:"example-1-basic-monorepo-setup",children:"Example 1: Basic monorepo setup"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",metastring:'title=".monorepolint.config.mjs"',children:'import { alphabeticalDependencies, packageOrder } from "@monorepolint/rules";\n\nexport default {\n  rules: [\n    // Apply to all packages in the monorepo\n    alphabeticalDependencies({}),\n    packageOrder({}),\n  ],\n};\n'})}),"\n",(0,l.jsx)(n.h3,{id:"example-2-excluding-specific-packages",children:"Example 2: Excluding specific packages"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",metastring:'title=".monorepolint.config.mjs"',children:'import { alphabeticalDependencies } from "@monorepolint/rules";\n\nexport default {\n  rules: [\n    alphabeticalDependencies({\n      // Exclude generated or external packages\n      excludePackages: ["generated-*", "legacy-package"],\n    }),\n  ],\n};\n'})}),"\n",(0,l.jsx)(n.h3,{id:"example-3-including-root-workspace",children:"Example 3: Including root workspace"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",metastring:'title=".monorepolint.config.mjs"',children:'import { alphabeticalDependencies } from "@monorepolint/rules";\n\nexport default {\n  rules: [\n    alphabeticalDependencies({\n      // Also apply to root package.json\n      includeWorkspaceRoot: true,\n    }),\n  ],\n};\n'})}),"\n",(0,l.jsx)(n.h2,{id:"beforeafter",children:"Before/After"}),"\n",(0,l.jsx)(n.h3,{id:"before-unorganized-dependencies",children:"Before (unorganized dependencies)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "dependencies": {\n    "zod": "^3.20.0",\n    "react": "^18.2.0",\n    "axios": "^1.0.0",\n    "lodash": "^4.17.21"\n  },\n  "devDependencies": {\n    "typescript": "^4.9.0",\n    "@types/react": "^18.0.0",\n    "eslint": "^8.30.0",\n    "@types/node": "^18.0.0"\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"after-alphabetically-sorted",children:"After (alphabetically sorted)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "dependencies": {\n    "axios": "^1.0.0",\n    "lodash": "^4.17.21",\n    "react": "^18.2.0",\n    "zod": "^3.20.0"\n  },\n  "devDependencies": {\n    "@types/node": "^18.0.0",\n    "@types/react": "^18.0.0",\n    "eslint": "^8.30.0",\n    "typescript": "^4.9.0"\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"source-code",children:"Source code"}),"\n",(0,l.jsxs)(n.p,{children:["For implementation details, see the ",(0,l.jsx)(n.a,{href:"https://github.com/monorepolint/monorepolint/blob/main/packages/rules/src/alphabeticalDependencies.ts",children:"rule source code"})," in the monorepolint repository."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunk_monorepolint_docs=self.webpackChunk_monorepolint_docs||[]).push([[425],{5635:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"guides/archetypes","title":"Archetypes and Large Monorepos","description":"After a monorepo grows in complexity, managing your rules can be quite complex. You may have a lot of different types of packages which can make applying consistent rules across classes of packages especially challenging. For that we build @osdk/archetypes.","source":"@site/docs/guides/archetypes.md","sourceDirName":"guides","slug":"/guides/archetypes","permalink":"/docs/guides/archetypes","draft":false,"unlisted":false,"editUrl":"https://github.com/monorepolint/monorepolint/edit/main/packages/docs/docs/guides/archetypes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Writing Custom Rules","permalink":"/docs/writing-custom-rules"},"next":{"title":"Putting your Config in a Package","permalink":"/docs/guides/config-in-a-package"}}');var r=a(4489),s=a(9725);const i={},c="Archetypes and Large Monorepos",l={},o=[{value:"Examples",id:"examples",level:2},{value:"Example using archetypes",id:"example-using-archetypes",level:3},{value:"Using fallback configuration",id:"using-fallback-configuration",level:3},{value:"Catching packages declared as two different archetypes",id:"catching-packages-declared-as-two-different-archetypes",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"archetypes-and-large-monorepos",children:"Archetypes and Large Monorepos"})}),"\n",(0,r.jsxs)(n.p,{children:["After a monorepo grows in complexity, managing your rules can be quite complex. You may have a lot of different types of packages which can make applying consistent rules across classes of packages especially challenging. For that we build ",(0,r.jsx)(n.code,{children:"@osdk/archetypes"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Instead of creating complex rule chains with include/exclude patterns that are hard to follow, you can instead define different archetypes and know that your rules are only applied consistently and only once per package."}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-using-archetypes",children:"Example using archetypes"}),"\n",(0,r.jsx)(n.p,{children:"In this example, we will assume that our monorepo has the following archetypical packages:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Test-only packages written in typescript that we don't publish"}),"\n",(0,r.jsx)(n.li,{children:"Benchmarks written purely in JS that we don't publish"}),"\n",(0,r.jsx)(n.li,{children:"Sample apps, written in react, that we don't publish"}),"\n",(0,r.jsx)(n.li,{children:"Our actual library packages, written in typescript that we do publish"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Additionally, we will configure our archetypes builder to error if it finds any packages that do not match any of these archetypes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { archetypes, ifTrue } from "@monorepolint/archetypes";\n\ninterface MyRules {\n  react?: boolean;\n  private?: boolean;\n  jsOnly?: boolean;\n}\n\nexport default archetypes<MyRules>(\n  (shared, rules) => {\n    return [\n      ...ifTrue(\n        !rules.jsOnly,\n        standardTsConfig({\n          template: {\n            compilerOptions: {\n              rootDir: "src",\n              outDir: "lib",\n              ...(rules.react\n                ? { jsx: "react" }\n                : {}),\n            },\n            include: ["./src/**/*"],\n          },\n        }),\n      ),\n      packageEntry({\n        ...shared,\n        options: {\n          entries: {\n            private: !!rules.private,\n          },\n        },\n      }),\n    ];\n  },\n  { unmatched: "error" },\n)\n  .addArchetype(\n    "tests",\n    ["@mine/tests.*"],\n    {\n      private: true,\n    },\n  )\n  .addArchetype(\n    "benchmarks",\n    ["@mine/benchmarks.*"],\n    {\n      private: true,\n      jsOnly: true,\n    },\n  )\n  .addArchetype(\n    "sample apps",\n    ["@mine/examples.*"],\n    {\n      private: true,\n      react: true,\n    },\n  )\n  .addArchetype(\n    "libraries",\n    ["@mine/a", "@mine/b"],\n    {},\n  );\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-fallback-configuration",children:"Using fallback configuration"}),"\n",(0,r.jsx)(n.p,{children:"If in our earlier example we want all unmatched packages to use a default configuration instead of erroring we can do that as well:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const rulesForUnmatchedPackages: {\n  private: true;\n};\n\nexport default archetypes<MyRules>(\n  (shared, rules) => {\n    return [\n      // ... our rules here\n    ];\n  },\n  {\n    unmatched: rulesForUnmatchedPackages,\n  },\n).addArchetype(\n  "libraries",\n  ["@mine/a", "@mine/b"],\n  {},\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"catching-packages-declared-as-two-different-archetypes",children:"Catching packages declared as two different archetypes"}),"\n",(0,r.jsx)(n.p,{children:"One thing that can be challenging about using monorepolint is that rules can accidentally be applied multiple times with different values."}),"\n",(0,r.jsx)(n.p,{children:"Take plain monorepolint configuration for example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const REACT = ["@mine/docs", "@mine/example", "@mine/react-*"];\nconst PUBLIC = ["@mine/react-lib"];\n\nexport default [\n  [\n    Rules.standardTsconfig({\n      options: { templateFile: "./tmpl/tsconfig.react.json" },\n      includePackages: REACT,\n    }),\n    Rules.standardTsconfig({\n      options: { templateFile: "./tmpl/tsconfig.json" },\n      includePackages: PUBLIC,\n    }),\n  ],\n];\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, ",(0,r.jsx)(n.code,{children:"@mine/react-lib"})," will be triggered by both rules creating a hard to debug situation. But with archetypes, we get a clean error:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'export default archetypes<MyRules>(\n  myCustomRuleFunc,\n  { unmatched: rulesForUnmatchedPackages },\n).addArchetype(\n  "uses react",\n  ["@mine/docs", "@mine/example", "@mine/react-*"],\n  { react: true },\n).addArchetype(\n  "public packages",\n  ["@mine/react-lib"],\n  {},\n);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With this configuration, you would get an error that ",(0,r.jsx)(n.code,{children:"@osdk/react-lib"})," was already included in the archetype ",(0,r.jsx)(n.code,{children:'"uses react"'})," allowing you to fix your conflict much quicker."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9725:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var t=a(4349);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);